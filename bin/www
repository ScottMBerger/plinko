#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('news:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var io = require('socket.io')(server);

var users = [];
var sockets = {};

var resultTable = [];
resultTable[0] = {num: -1300, land:"m"};
resultTable[1] = {num: -1000, land:"m"};
resultTable[2] = {num: -700, land:"r"};
resultTable[3] = {num: -400, land:"r"};
resultTable[4] = {num: -100, land:"m"};
resultTable[5] = {num: 200, land:"m"};
resultTable[6] = {num: 500, land:"r"};
resultTable[7] = {num: 800, land:"r"};
resultTable[8] = {num: 1100, land:"m"};
var rand = resultTable[Math.floor(Math.random() * resultTable.length)];
var endgame = true;
var leftBets = [];
var midBets = [];
var rightBets = [];
var winTbl = {"l":leftBets, "m":midBets, "r":rightBets};
var rng = 101;

var mongoose = require('mongoose');
var Solution = mongoose.model('Solution');
var gamenum = 1;
var gamestate = 1
setInterval(function(){
  if (gamestate == 1) {
    
    
    gamestate++;
  } else if (gamestate == 2) {
    
    gamestate++;
  } else {

  }

}, 4000);

var startState = function() {
  console.log("Starting Game: "+gamenum);
  gamenum++;
  //rand.num = 345//+345 2799.99 3144
  do {
    rng = Math.floor(340 + (Math.random() * 2480.99));
  } while (rng % 20 != 0);
  
  rand.num = rng;

  Solution.findOne({ 'position': rand.num }, 'result position', function (err, response) {
    if (err) return handleError(err);
    if (typeof response !== 'undefined') {
      console.log('Result for position '+response.position+' is '+response.result);
      rand.land = response.result;
    } else {
      console.log("jackpost");
    };
    
  });
  console.log("Dropping Ball: "+rand.num);

  io.emit('startState', {
      ballx: rand.num
  }); 
  setTimeout(payoutState, 5000);
  io.emit('hellotest', {
      test: "HAI"
  }); 
}

var payoutState = function() {
  var ballx = Math.floor(350 + (Math.random() * 2798));

    console.log("payout winners: "+rand.land);
    if (rand.land == "left") {
      calcWinners(leftBets);
    } else if (rand.land == "middle") {
      calcWinners(midBets);
    } else if (rand.land == "right") {
      calcWinners(rightBets);
    }
    
    io.emit('payoutState', {
        ballx: rand.num,
        spot: rand.land
    });
    
    leftBets = [];
    midBets = [];
    rightBets = [];
    setTimeout(betState, 2000);
}

var betState = function() {

  io.emit('betState', {
      ballx: rand.num,
      spot: rand.land
  });
  setTimeout(startState, 5000);
}

startState();

io.on('connection', function(socket){
  console.log('A user connected! '+socket.id);

  var currentPlayer = {
    id: socket.id,
    credits: 1000
  };

  socket.emit('updateCredits', 1000);
  sockets[socket.id] = socket;
  users[currentPlayer.id] = currentPlayer;

  socket.on('left bet', function(msg){
    console.log(socket.id+ " leftbets");
    leftBets.push({
      bet: msg,
      id: socket.id
    });
    users[currentPlayer.id].credits -= msg;
    socket.emit('updateCredits', users[currentPlayer.id].credits);
    io.emit('left message', msg, socket.id);
  });

  socket.on('middle bet', function(msg){
    midBets.push({
      bet: msg,
      id: socket.id
    });
    users[currentPlayer.id].credits -= msg;
    socket.emit('updateCredits', users[currentPlayer.id].credits);
    io.emit('middle message', msg, socket.id);
  });

  socket.on('right bet', function(msg){
    rightBets.push({
      bet: msg,
      id: socket.id
    });
    users[currentPlayer.id].credits -= msg;
    socket.emit('updateCredits', users[currentPlayer.id].credits);
    io.emit('right message', msg, socket.id);
  });

  

  socket.on('chat message', function(msg){
    //io.emit('chat message', socket.id.substr(3, 4)+": "+msg);
    socket.broadcast.emit('chat message', {user: socket.id.substr(3, 4), msg: msg});
  });
});

function calcWinners(table) {
    table.forEach( function(u) {
      //console.log(u.bet);
      users[u.id].credits += u.bet*3
      sockets[u.id].emit('updateCredits', users[u.id].credits);
    });
}
function sendUpdates() {
    users.forEach( function(u) {
        sockets[u.id].emit('updateCredits', users[u.id].credits);
    });
};

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
